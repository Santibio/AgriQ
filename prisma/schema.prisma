generator client {
  provider         = "prisma-client-js"
  connection_limit = "20"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  username String     @unique
  password String
  role     Role
  lastName String
  name     String
  avatar   String
  active   Boolean    @default(true)
  movement Movement[]
}

model Product {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  name         String   @unique
  active       Boolean  @default(true)
  price        Float
  image        String
  category     String
  type         String
  presentation String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  products     Batch[]
}

model Batch {
  id                  Int              @id @default(autoincrement())
  code                String           @unique
  initialQuantity     Int
  depositQuantity     Int
  marketQuantity      Int              @default(0)
  sentQuantity        Int              @default(0)
  receivedQuantity    Int              @default(0)
  discardedQuantity   Int              @default(0)
  reservedQuantity    Int              @default(0)
  soltQuantity        Int              @default(0)
  discrepancyQuantity Int              @default(0)
  productId           Int
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  product             Product          @relation(fields: [productId], references: [id])
  movementDetail      MovementDetail[]
}

model Movement {
  id             Int              @id @default(autoincrement())
  userId         Int
  createdAt      DateTime         @default(now())
  type           MovementType
  orderId        Int?
  discard        Discard?
  order          Order?           @relation(fields: [orderId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  movementDetail MovementDetail[]
  shipment       Shipment?
}

model MovementDetail {
  id         Int      @id @default(autoincrement())
  movementId Int
  batchId    Int
  quantity   Int
  batch      Batch    @relation(fields: [batchId], references: [id])
  movement   Movement @relation(fields: [movementId], references: [id])
}

model Customer {
  id              Int             @id @default(autoincrement())
  lastName        String
  name            String
  phone           String          @db.VarChar(13)
  email           String          @unique
  fiscalCondition FiscalCondition
  active          Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  order           Order[]
}

model Shipment {
  id         Int            @id @default(autoincrement())
  status     ShipmentStatus @default(PENDING)
  movementId Int            @unique
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  movement   Movement       @relation(fields: [movementId], references: [id])
}

model Discard {
  id         Int           @id @default(autoincrement())
  reason     DiscardReason
  movementId Int           @unique
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  movement   Movement      @relation(fields: [movementId], references: [id])
}

model Order {
  id                 Int           @id @default(autoincrement())
  customerId         Int
  statusDoing        StatusDoing   @default(PENDING)
  statusPayment      StatusPayment @default(UNPAID)
  total              Float
  agreedDeliveryTime DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  movements          Movement[]
  customer           Customer      @relation(fields: [customerId], references: [id])
  details            OrderDetail[]
  sale               Sale?
}

model OrderDetail {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productName String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])
}

model Sale {
  id             Int           @id @default(autoincrement())
  orderId        Int           @unique
  order          Order?        @relation(fields: [orderId], references: [id])
  movementId     Int           @unique
  paymentMethod  PaymentMethod
  paymentReceipt String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum Role {
  ADMIN
  DEPOSIT
  SELLER
}

enum MovementType {
  STORED
  DISCARDED
  SENT
  EDITED
  RECEIVED_MARKET
  AVAILABLE
  ORDERED
  READY_TO_DELIVER
  DELIVERED
  NOT_DELIVERED
  CANCELLED
  SOLD
  RETURNED
}

enum FiscalCondition {
  RESPONSIBLE
  MONOTAX
  FINAL_CONSUMER
  EXEMPT
}

enum ShipmentStatus {
  PENDING
  RECEIVED_OK
  RECEIVED_NO_OK
}

enum DiscardReason {
  DAMAGED
  EXPIRED
  OTHER
}

enum StatusDoing {
  PENDING
  READY_TO_DELIVER
  DELIVERED
}

enum StatusPayment {
  PAID
  UNPAID
  PARCIAL_PAID
  CANCELLED
}

enum PaymentMethod {
  CASH
  WIRE
}
