// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Role {
  ADMIN
  DEPOSIT
  SELLER
}

model User {
  id       Int        @id @default(autoincrement())
  username String     @unique
  password String
  role     Role
  lastName String
  name     String
  avatar   String
  movement Movement[]
  active   Boolean    @default(true)
}

model Product {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String   @unique
  active    Boolean  @default(true)
  price     Float
  image     String
  products  Batch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Batch {
  id                Int              @id @default(autoincrement())
  code              String           @unique
  initialQuantity   Int
  depositQuantity   Int
  marketQuantity    Int
  sentQuantity      Int
  receivedQuantity  Int
  discardedQuantity Int
  reservedQuantity  Int
  soltQuantity      Int
  productId         Int
  product           Product          @relation(fields: [productId], references: [id])
  movementDetail    MovementDetail[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum MovementType {
  STORED
  DISCARDED
  SENT
  EDITED
  RECEIVED_MARKET
  AVAILABLE
  ORDERED
  SOLD
  CANCELED
  DELIVERED
  NOT_DELIVERED
  RETURNED
}

model Movement {
  id             Int              @id @default(autoincrement())
  movementDetail MovementDetail[]
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime         @default(now())
  type           MovementType
}

model MovementDetail {
  id         Int      @id @default(autoincrement())
  movementId Int
  movement   Movement @relation(fields: [movementId], references: [id])
  bacthId    Int
  batch      Batch    @relation(fields: [bacthId], references: [id])
  quantity   Int
}
